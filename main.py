import pygame
from sys import exit
from random import randint

pygame.init()

game_active = False

screen = pygame.display.set_mode((1000,500))
pygame.display.set_caption('First Game')
clock = pygame.time.Clock()

test_font = pygame.font.Font('font\\Pixeltype.ttf' ,100)

sky_surface = pygame.image.load('graphics\\Sky.jpg').convert()
sky_rect = sky_surface.get_rect(topleft=(0,0))
ground_surface = pygame.image.load('graphics\\ground.jpg').convert()

snail_1 = pygame.image.load('graphics\\snail\\snail1.png').convert_alpha()
fly_1 = pygame.image.load('graphics\\Fly\\Fly1.png')

player_surface = pygame.image.load('graphics\\Player\\player_stand.png').convert_alpha()
player_rect = player_surface.get_rect(bottomleft=(50, 390))                                         #This command just creates a rectangle of the size of image it is built in reference to and just placed on the screen as per the positional arguments.
player_gravity = 0
angle_change = 0
turn_switch = True

test_font2 = pygame.font.Font('font\\Pixeltype.ttf' ,60)
text_surf_start = test_font2.render('Press "Enter" to start Game', False , 'Black')
text_surf_start_rect = text_surf_start.get_rect(center=(500,400))

actual_score = 0
score_surface = test_font2.render(f' Score : {actual_score} ' , True, 'Black')
score_rect = score_surface.get_rect(center=(500,100))

highscore = 0
highscore_surf = test_font2.render(f'Highscore : {highscore}', True, 'Black')
highscore_surf_rect = highscore_surf.get_rect(topright=(980,10))

#list contains created enemy spawn rectangles
spawn_list = []
def spawn_func(sp_list):
    if sp_list:
        for new_ob_rect in sp_list:
            new_ob_rect.x -= 5
            if new_ob_rect.y > 300:
                screen.blit(snail_1, new_ob_rect)
            else:
                screen.blit(fly_1, new_ob_rect)

            sp_list = [ x for x in sp_list if x.x > 0 ]
            

        return sp_list
    
    else: return []

# Scoring Function
def scoring(the_list , act_scr):                        #This function works because no matter what the number is generated by randint(), if we keep taking away '5' from (x) value of the rectangle the last (x) value will always be between 0 and 5 only once.
    if the_list:
        for it in the_list:
            if it.x <= 5:
                act_scr += 1
            return act_scr
    else: return 0


# Randomising Obstacle Creation
new_spawn_event = pygame.USEREVENT + 1
pygame.time.set_timer(new_spawn_event, 900)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            exit()
        if event.type == pygame.MOUSEMOTION:
            mousepos = event.pos
        if player_rect.bottom == 390 and game_active:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                player_gravity = -14
            elif event.type == pygame.MOUSEBUTTONDOWN and player_rect.collidepoint(event.pos):
                player_gravity = -14
        if event.type == new_spawn_event and game_active:
            if randint(0,2):
                spawn_list.append(snail_1.get_rect(bottomleft=(randint(900, 1100), 390)))
            else:
                spawn_list.append(fly_1.get_rect(bottomleft=(randint(900, 1100), 250)))
    

    if game_active:

        screen.blit(sky_surface, (0,-70))
        screen.blit(ground_surface, (0,390))
        pygame.draw.rect(screen, '#8694BA', score_rect, 0 , 3)
        pygame.draw.rect(screen, '#8694BA', score_rect, 10, 3)

        # Gravity
        player_gravity += 0.6
        player_rect.y += player_gravity

        # Setting up a floor for the player
        if player_rect.bottom >= 390: player_rect.bottom = 390 

        # Player Surface
        screen.blit(player_surface, (player_rect))                                                  #Here instead of giving the coordinates directly we place the image(player_surface) inside the rectangle that has already been placed on the screen

        # Calling Enemy spawn
        spawn_list = spawn_func(spawn_list)

        # Scoring Function
        actual_score = scoring(spawn_list, actual_score)

        # Checking for collision
        if spawn_list:
            if player_rect.colliderect(spawn_list[0]): game_active=False

        # Adding points for every passed snail
        score_surface = test_font2.render(f' Score : {actual_score} ' , True, 'Black')
        screen.blit(score_surface, score_rect)

        # Setting up Highscore
        if actual_score > highscore:
            highscore = actual_score
            highscore_surf = test_font2.render(f'Highscore : {highscore}', True, 'Black')

        print(spawn_list)

    # Welcome Screen (when game is not running)
    else:
        
        screen.fill((94,129,162))
        if turn_switch: angle_change += 1.5
        else: angle_change -= 1.5

        if angle_change >= 90: turn_switch = False
        elif angle_change <= -90: turn_switch = True


        player_stand = pygame.transform.rotozoom(pygame.image.load('graphics\\Player\\player_stand.png').convert_alpha(), angle_change, 2)
        player_stand_rect = player_stand.get_rect(center = (500,250))
        screen.blit(player_stand, player_stand_rect)

        game_name = test_font.render('PiXel Runner', True, (111,196,169))
        game_name_rect = game_name.get_rect(center = (500,100))
        screen.blit(game_name, game_name_rect)

        screen.blit(text_surf_start, text_surf_start_rect)

        screen.blit(highscore_surf, highscore_surf_rect)

        # Game starts when a specified event occurs
        if event.type == pygame.KEYDOWN and pygame.K_KP_ENTER:
            actual_score = 0
            player_rect.bottom = 390
            score_surface = test_font2.render(f' Score : {actual_score} ' , True, 'Black')
            game_active = True
            spawn_list = []

    pygame.display.update()
    clock.tick(60)                                                                              #limit the frames per second (60 per sec in this case)
    
